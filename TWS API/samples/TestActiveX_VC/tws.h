/* Copyright (C) 2013 Interactive Brokers LLC. All rights reserved. This code is subject to the terms
 * and conditions of the IB API Non-Commercial License or the IB API Commercial License, as applicable. */

#if !defined(AFX_TWS_H__3E433C7B_B084_42E6_BC50_888857740671__INCLUDED_)
#define AFX_TWS_H__3E433C7B_B084_42E6_BC50_888857740671__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTws wrapper class

class CTws : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTws)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xa77ccf8, 0x52c, 0x11d6, { 0xb0, 0xec, 0x0, 0xb0, 0xd0, 0x74, 0x17, 0x9c } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString TwsConnectionTime();
	long serverVersion();

// Operations
public:
	void cancelMktData(long id);
	void cancelOrder(long id);
	void placeOrder(long id, LPCTSTR action, long quantity, LPCTSTR symbol, 
		LPCTSTR secType, LPCTSTR expiry, double strike, LPCTSTR right, LPCTSTR multiplier, 
		LPCTSTR exchange, LPCTSTR primaryExchange, LPCTSTR curency, LPCTSTR orderType, double price, 
		double auxPrice, LPCTSTR goodAfterTime, LPCTSTR faGroup, 
		LPCTSTR faMethod, LPCTSTR faPercentage, LPCTSTR faProfile, LPCTSTR goodTillDate);
	void placeOrder2(long id, LPCTSTR action, long quantity, LPCTSTR localSymbol,
		LPCTSTR secType, LPCTSTR exchange, LPCTSTR primaryExchange, LPCTSTR curency, LPCTSTR orderType,
		double lmtPrice, double auxPrice, LPCTSTR goodAfterTime, LPCTSTR faGroup,
		LPCTSTR faMethod, LPCTSTR faPercentage, LPCTSTR faProfile, LPCTSTR goodTillDate);
	void disconnect();
	void connect(LPCTSTR host, long port, long clientId, bool extraAuth = false);
	void reqMktData(long id, LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike,
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR primaryExchange,
		LPCTSTR currency, LPCTSTR genericTicks, bool snapshot);
	void reqOpenOrders();
	void reqAccountUpdates(BOOL subscribe, LPCTSTR acctCode);
	void reqExecutions();
	void reqIds(long numIds);
	void reqMktData2(long id, LPCTSTR localSymbol, LPCTSTR secType, LPCTSTR exchange, 
		LPCTSTR primaryExchange, LPCTSTR currency, LPCTSTR genericTicks, bool snapshot);
	void reqContractDetails(LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike,
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR curency, long isExpired);
	void reqContractDetails2(LPCTSTR localSymbol, LPCTSTR secType, LPCTSTR exchange, LPCTSTR curency, long isExpired);
	void reqMktDepth(long id, LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike, 
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR curency, long numRows);
	void reqMktDepth2(long id, LPCTSTR localSymbol, LPCTSTR secType, LPCTSTR exchange, LPCTSTR curency, long numRows);
	void cancelMktDepth(long id);
	void addComboLeg(long conid, LPCTSTR action, long ratio, LPCTSTR exchange, long openClose, long shortSaleSlot, LPCTSTR designatedLocation, long exemptCode);
	void clearComboLegs();
	void cancelNewsBulletins();
	void reqNewsBulletins(BOOL allDaysMsgs);
	void setServerLogLevel(long logLevel);
	void reqAutoOpenOrders(BOOL bAutoBind);
	void reqAllOpenOrders();
	void reqManagedAccts();
	void replaceFA(long pFaDataType, LPCTSTR cxml);
	void requestFA(long pFaDataType) ;
	void reqHistoricalData(long id, LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike,
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR currency, long isExpired,
		LPCTSTR backfillEndDateTime, LPCTSTR backfillDuration, LPCTSTR barSizeSetting,
		LPCTSTR whatToShow, long useRTH, long formatDate);
	void exerciseOptions(long id, LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike,
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR currency,
		long exerciseAction, long exerciseQuantity, long exerciseOverride);
	void cancelScannerSubscription(long id);
	void cancelHistoricalData(long id);
	void reqRealTimeBars(long id, LPCTSTR symbol, LPCTSTR secType, LPCTSTR expiry, double strike,
		LPCTSTR right, LPCTSTR multiplier, LPCTSTR exchange, LPCTSTR primaryExchange, LPCTSTR currency,
		long isExpired, int barSize, LPCTSTR whatToShow, bool useRTH);
	void cancelRealTimeBars(long id);
	void reqScannerParameters();
	void reqScannerSubscription(long tickerId, long numberOfRows, LPCTSTR instrument,
		LPCTSTR locationCode, LPCTSTR scanCode, double abovePrice, double belowPrice,
		long aboveVolume, double marketCapAbove, double marketCapBelow, LPCTSTR moodyRatingAbove,
		LPCTSTR moodyRatingBelow, LPCTSTR spRatingAbove, LPCTSTR spRatingBelow, LPCTSTR maturityDateAbove,
        LPCTSTR maturityDateBelow, double couponRateAbove, double couponRateBelow, long excludeConvertible,
		long averageOptionVolumeAbove, LPCTSTR scannerSettingPairs, LPCTSTR stockFilterType);
	void resetAllProperties();
	void reqCurrentTime();
	void reqFundamentalData(LONG reqId, IDispatch* contract, LPCTSTR reportType);
	void cancelFundamentalData(LONG reqId);
	void calculateImpliedVolatility(LONG reqId, IDispatch* contract, double optionPrice, double underPrice);
	void calculateOptionPrice(LONG reqId, IDispatch* contract, double volatility, double underPrice);
	void cancelCalculateImpliedVolatility(LONG reqId);
	void cancelCalculateOptionPrice(LONG reqId);
	void reqGlobalCancel();
	void reqMarketDataType(LONG marketDataType);
	void reqPositions();
	void cancelPositions();
	void reqAccountSummary(LONG reqId, LPCTSTR groupName, LPCTSTR tags);
	void cancelAccountSummary(LONG reqId);
	void verifyRequest(LPCTSTR apiName, LPCTSTR apiVersion);
	void verifyMessage(LPCTSTR apiData);
	void queryDisplayGroups(LONG reqId);
	void subscribeToGroupEvents(LONG reqId, LONG groupId);
	void updateDisplayGroup(LONG reqId, LPCTSTR contractInfo);
	void unsubscribeFromGroupEvents(LONG reqId);

	void reqContractDetailsEx(LONG reqId, IDispatch* contract);
	void reqMktDataEx(LONG tickerId, IDispatch* contract,
					  LPCTSTR genericTicks, BOOL snapshot, IDispatch* mktDataOptions);
	void reqMktDepthEx(LONG tickerId, IDispatch* contract, LONG numRows, IDispatch* mktDepthOptions);
	void placeOrderEx(LONG orderId, IDispatch* contract, IDispatch* order);
	void reqExecutionsEx(LONG reqId, IDispatch* filter);
	void exerciseOptionsEx(LONG tickerId, IDispatch* contract, LONG exerciseAction,
				LONG exerciseQuantity, LPCTSTR account, LONG override);
	void reqHistoricalDataEx(LONG tickerId, IDispatch* contract, LPCTSTR endDateTime,
				LPCTSTR duration, LPCTSTR barSize, LPCTSTR whatToShow, BOOL useRTH, LONG formatDate, IDispatch* chartOptions);
	void reqRealTimeBarsEx(LONG tickerId, IDispatch* contract, LONG barSize, LPCTSTR whatToShow, BOOL useRTH, IDispatch* realTimeBarsOptions);
	void reqScannerSubscriptionEx(LONG tickerId, IDispatch* subscription, IDispatch* scannerSubscriptionOptions);
	void addOrderComboLeg(double price);
	void clearOrderComboLegs();

	IDispatch* createContract(void);
	IDispatch* createComboLegList(void);
	IDispatch* createOrder(void);
	IDispatch* createExecutionFilter(void);
	IDispatch* createScannerSubscription(void);
	IDispatch* createUnderComp(void);
	IDispatch* createTagValueList(void);
	IDispatch* createOrderComboLegList(void);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_TWS_H__3E433C7B_B084_42E6_BC50_888857740671__INCLUDED_)
